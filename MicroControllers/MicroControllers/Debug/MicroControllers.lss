
MicroControllers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  000001d4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000024e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000280  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000002c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ccf  00000000  00000000  00000328  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000989  00000000  00000000  00000ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004da  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000493  00000000  00000000  00001f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000030f  00000000  00000000  000023ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000026ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 ed       	ldi	r30, 0xD4	; 212
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a6 30       	cpi	r26, 0x06	; 6
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	02 d0       	rcall	.+4      	; 0xb8 <main>
  b4:	8d c0       	rjmp	.+282    	; 0x1d0 <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <main>:

int value = 5;

int main()
{	
	DDRD = 0xF0;			// PORTD(7:4) output, PORTD(3:0) input	
  b8:	80 ef       	ldi	r24, 0xF0	; 240
  ba:	81 bb       	out	0x11, r24	; 17
	init();
  bc:	42 d0       	rcall	.+132    	; 0x142 <init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  be:	2f ef       	ldi	r18, 0xFF	; 255
  c0:	89 e6       	ldi	r24, 0x69	; 105
  c2:	98 e1       	ldi	r25, 0x18	; 24
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0xc>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x16>
  ce:	00 00       	nop
	_delay_ms(1000);
	
	while(1){
		lcd_write_command(0x01);
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	6f d0       	rcall	.+222    	; 0x1b2 <lcd_write_command>
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	8a e1       	ldi	r24, 0x1A	; 26
  d8:	96 e0       	ldi	r25, 0x06	; 6
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x22>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x2c>
  e4:	00 00       	nop
		_delay_ms(250);
		set_cursor(0);
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	6f d0       	rcall	.+222    	; 0x1ca <set_cursor>
  ec:	2f e7       	ldi	r18, 0x7F	; 127
  ee:	8a e1       	ldi	r24, 0x1A	; 26
  f0:	96 e0       	ldi	r25, 0x06	; 6
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <main+0x3a>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <main+0x44>
		_delay_ms(250);
		display_text("hmmm");
  fc:	00 00       	nop
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	91 e0       	ldi	r25, 0x01	; 1
 102:	43 d0       	rcall	.+134    	; 0x18a <display_text>
 104:	2f ef       	ldi	r18, 0xFF	; 255
 106:	8e e9       	ldi	r24, 0x9E	; 158
 108:	94 e2       	ldi	r25, 0x24	; 36
 10a:	21 50       	subi	r18, 0x01	; 1
 10c:	80 40       	sbci	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	e1 f7       	brne	.-8      	; 0x10a <main+0x52>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x5c>
 114:	00 00       	nop
 116:	dc cf       	rjmp	.-72     	; 0xd0 <main+0x18>

00000118 <lcd_strobe_lcd_e>:
 118:	8f ec       	ldi	r24, 0xCF	; 207
 11a:	97 e0       	ldi	r25, 0x07	; 7
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_strobe_lcd_e+0x4>
 120:	00 c0       	rjmp	.+0      	; 0x122 <lcd_strobe_lcd_e+0xa>
 122:	00 00       	nop
}

void lcd_strobe_lcd_e(void)
{
	_delay_ms(1);
	PORTC |= (1<<LCD_E);	// E high
 124:	ab 9a       	sbi	0x15, 3	; 21
 126:	8f ec       	ldi	r24, 0xCF	; 207
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <lcd_strobe_lcd_e+0x12>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <lcd_strobe_lcd_e+0x18>
 130:	00 00       	nop
	_delay_ms(1);			// nodig
	PORTC &= ~(1<<LCD_E);  	// E low
 132:	ab 98       	cbi	0x15, 3	; 21
 134:	8f ec       	ldi	r24, 0xCF	; 207
 136:	97 e0       	ldi	r25, 0x07	; 7
 138:	01 97       	sbiw	r24, 0x01	; 1
 13a:	f1 f7       	brne	.-4      	; 0x138 <lcd_strobe_lcd_e+0x20>
 13c:	00 c0       	rjmp	.+0      	; 0x13e <lcd_strobe_lcd_e+0x26>
 13e:	00 00       	nop
 140:	08 95       	ret

00000142 <init>:
#include "lcd.h"
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void init() {
 142:	cf 93       	push	r28
	// PORTC output mode and all low (also E and RS pin)
	DDRC = 0xFF;
 144:	8f ef       	ldi	r24, 0xFF	; 255
 146:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 148:	15 ba       	out	0x15, r1	; 21

	// Step 2 (table 12)
	PORTC = 0x28;	// function set
 14a:	c8 e2       	ldi	r28, 0x28	; 40
 14c:	c5 bb       	out	0x15, r28	; 21
	lcd_strobe_lcd_e();
 14e:	e4 df       	rcall	.-56     	; 0x118 <lcd_strobe_lcd_e>

	// Step 3 (table 12)
	PORTC = 0x28;   // function set
	lcd_strobe_lcd_e();
 150:	c5 bb       	out	0x15, r28	; 21
 152:	e2 df       	rcall	.-60     	; 0x118 <lcd_strobe_lcd_e>
	PORTC = 0x80;
 154:	80 e8       	ldi	r24, 0x80	; 128
	lcd_strobe_lcd_e();
 156:	85 bb       	out	0x15, r24	; 21

	// Step 4 (table 12)
	PORTC = 0x00;   // Display on/off control
 158:	df df       	rcall	.-66     	; 0x118 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 15a:	15 ba       	out	0x15, r1	; 21
	PORTC = 0xF0;
 15c:	dd df       	rcall	.-70     	; 0x118 <lcd_strobe_lcd_e>
	lcd_strobe_lcd_e();
 15e:	80 ef       	ldi	r24, 0xF0	; 240

	// Step 4 (table 12)
	PORTC = 0x00;   // Entry mode set
 160:	85 bb       	out	0x15, r24	; 21
	lcd_strobe_lcd_e();
 162:	da df       	rcall	.-76     	; 0x118 <lcd_strobe_lcd_e>
 164:	15 ba       	out	0x15, r1	; 21
	PORTC = 0x60;
 166:	d8 df       	rcall	.-80     	; 0x118 <lcd_strobe_lcd_e>
 168:	80 e6       	ldi	r24, 0x60	; 96
	lcd_strobe_lcd_e();
 16a:	85 bb       	out	0x15, r24	; 21
 16c:	d5 df       	rcall	.-86     	; 0x118 <lcd_strobe_lcd_e>
}  
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <lcd_write_data>:
	value += position;
	lcd_write_command(value);
}

void lcd_write_data(unsigned char byte)
{
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
	PORTC = byte;
 176:	85 bb       	out	0x15, r24	; 21
	PORTC |= (1<<LCD_RS);
 178:	aa 9a       	sbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 17a:	ce df       	rcall	.-100    	; 0x118 <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 17c:	c2 95       	swap	r28
 17e:	c0 7f       	andi	r28, 0xF0	; 240
 180:	c5 bb       	out	0x15, r28	; 21
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
 182:	aa 9a       	sbi	0x15, 2	; 21
 184:	c9 df       	rcall	.-110    	; 0x118 <lcd_strobe_lcd_e>
}
 186:	cf 91       	pop	r28
 188:	08 95       	ret

0000018a <display_text>:
	lcd_strobe_lcd_e();
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}  

void display_text(char *str) {
 18a:	cf 93       	push	r28
 18c:	df 93       	push	r29
 18e:	ec 01       	movw	r28, r24
	for(;*str; str++){
 190:	88 81       	ld	r24, Y
 192:	88 23       	and	r24, r24
 194:	59 f0       	breq	.+22     	; 0x1ac <display_text+0x22>
 196:	21 96       	adiw	r28, 0x01	; 1
		lcd_write_data(*str);
 198:	ec df       	rcall	.-40     	; 0x172 <lcd_write_data>
 19a:	8f e3       	ldi	r24, 0x3F	; 63
 19c:	9c e9       	ldi	r25, 0x9C	; 156
 19e:	01 97       	sbiw	r24, 0x01	; 1
 1a0:	f1 f7       	brne	.-4      	; 0x19e <display_text+0x14>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <display_text+0x1a>
 1a4:	00 00       	nop
	PORTC = 0x60;
	lcd_strobe_lcd_e();
}  

void display_text(char *str) {
	for(;*str; str++){
 1a6:	89 91       	ld	r24, Y+
 1a8:	81 11       	cpse	r24, r1
 1aa:	f6 cf       	rjmp	.-20     	; 0x198 <display_text+0xe>
		lcd_write_data(*str);
		_delay_ms(20);
	}
}
 1ac:	df 91       	pop	r29
 1ae:	cf 91       	pop	r28
 1b0:	08 95       	ret

000001b2 <lcd_write_command>:
	PORTC |= (1<<LCD_RS);
	lcd_strobe_lcd_e();
}

void lcd_write_command(unsigned char byte)
{
 1b2:	cf 93       	push	r28
 1b4:	c8 2f       	mov	r28, r24
	PORTC = byte;
 1b6:	85 bb       	out	0x15, r24	; 21
	PORTC &= ~(1<<LCD_RS);
 1b8:	aa 98       	cbi	0x15, 2	; 21
	lcd_strobe_lcd_e();
 1ba:	ae df       	rcall	.-164    	; 0x118 <lcd_strobe_lcd_e>

	PORTC = (byte<<4);
 1bc:	c2 95       	swap	r28
 1be:	c0 7f       	andi	r28, 0xF0	; 240
 1c0:	c5 bb       	out	0x15, r28	; 21
	PORTC &= ~(1<<LCD_RS);
	lcd_strobe_lcd_e();
 1c2:	aa 98       	cbi	0x15, 2	; 21
 1c4:	a9 df       	rcall	.-174    	; 0x118 <lcd_strobe_lcd_e>
}
 1c6:	cf 91       	pop	r28
 1c8:	08 95       	ret

000001ca <set_cursor>:
}

void set_cursor(int position) {
	int value = 0x80;
	value += position;
	lcd_write_command(value);
 1ca:	80 58       	subi	r24, 0x80	; 128
 1cc:	f2 cf       	rjmp	.-28     	; 0x1b2 <lcd_write_command>
 1ce:	08 95       	ret

000001d0 <_exit>:
 1d0:	f8 94       	cli

000001d2 <__stop_program>:
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <__stop_program>
